---
title: "savingSessions: energy analysis"
author: "Ben Anderson (@dataknut)"
date: 'Last run at: `r Sys.time()`'
format: 
  html:
    self-contained: true
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
execute:
  echo: false
  warning: false
editor: visual
---

# No longer updated

See the [integrated electricity demand and twitter report](dfsReport.html) instead.

# Introduction

UK 'demand flexibility service' [DFS](https://www.nationalgrideso.com/industry-information/balancing-services/demand-flexibility) experiments/trials/'live' events by NG-ESO and retailers such as [\@OctopusEnergy](https://twitter.com/SavingSessions)

-   DFS began on 1 November 2022.
-   The service will run until March 2023.

Relevant media articles:

-   Monday 23rd Jan 2023: <https://www.bbc.co.uk/news/business-64367504>
-   Tuesday 24th Jan 2023: <https://www.bbc.co.uk/news/business-64372264>

> Q: Is there a noticeable 'dip' in demand?

(Can we even tell?)

# Code setup

Part of <https://github.com/dataknut/savingSessions>

```{r}
#| label: codeSetup
#| warning: false

library(data.table)
library(dkUtils)
library(flextable)
library(ggplot2)
library(hms)
library(lubridate)

esoDataPath <- path.expand("~/Dropbox/data/UK_NGESO/genMix/")

# functions ----

makeFlexTable <- function(df, cap = "caption", digits = 0){
  # makes a pretty flextable - see https://cran.r-project.org/web/packages/flextable/index.html
  ft <- flextable::flextable(df)
  ft <- colformat_double(ft, digits = digits)
  ft <- fontsize(ft, size = 9)
  ft <- fontsize(ft, size = 10, part = "header")
  ft <- set_caption(ft, caption = cap)
  return(flextable::autofit(ft))
}

# generic plotting function - choose the variable you want to compare and amend the y axis label to match
make_comparisonPlot <- function(dt, # half hourly data
                                startDateTime,
                                endDateTime,
                                yVar = "GENERATION", #default
                                yVarLab = "MW per half-hour",
                                timeLag = 10 # default number of comparison days
                                  ){
  res <- list() # results holder
  dt[, dv_hms := hms::as_hms(dv_start)]
  
  sessionDate <- lubridate::date(endDateTime) # you'll see why
  # extract and aggregate baseline
  baseline_HalfHourlyDT <- dt[dv_date != sessionDate & # not the session day
                                dv_date > sessionDate - (timeLag + 1) & # n days
                               dv_date < sessionDate,
                              .(y_mean = mean(get(yVar))), # mean of the chosen variable
                              keyby = .(hms = dv_hms)
                              ]
  
  res$nCompDays <-timeLag
  baseline_HalfHourlyDT[, legend_lab := paste0("Comparison mean")]
  # extract session day
  session_HalfHourlyDT <- dt[dv_date == sessionDate, # the session day,
                              .(y_mean = mean(get(yVar))), # mean of just one value but this is just to match baseline variable names
                              keyby = .(hms = dv_hms)
                              ]
  session_HalfHourlyDT[, legend_lab := "Saving session"]
  
  # combine them in long form for ggplot
  plotDT <- rbind(baseline_HalfHourlyDT, session_HalfHourlyDT)
  
  plotDT[, adjusted_hms := hms::as_hms(hms + (15*60))] # so they plot at centres of half-hours
  
  periodAlpha <- 0.3 #  shaded rects on plots
  periodFill <- "grey50"
    ymax <- max(plotDT$y_mean) # GW
    ymin <- min(plotDT$y_mean) # GW
    xmin <- hms::as_hms(lubridate::as_datetime(startDateTime))
    xmax <- hms::as_hms(lubridate::as_datetime(endDateTime)) + 30*60 # to allow for the start time
    
    t <- plotDT[hms >= xmin & hms < xmax]
    
    wt <- dcast(t[, .(hms, wday, y_mean, legend_lab)], hms ~ legend_lab, value.var = "y_mean")
    
    wt[, MW_diff := `Saving session` - `Comparison mean`]
    res$wt <- wt[, pc_diff := 100*(MW_diff/`Comparison mean`)]
    
    label <- paste0("SavingSession (", 
                    as.Date(startDateTime),
                    ")"
    )
    plotDT[, legend_lab := ifelse(legend_lab == "Saving session",
                                  label,
                                  legend_lab)]
    
    res$p <- ggplot2::ggplot(plotDT, aes(x = adjusted_hms, y = y_mean, 
                                         colour = legend_lab)) +
      geom_line() +
      geom_point() +
      annotate("rect", xmin = xmin,
               xmax = xmax,
               ymin = ymin, ymax = ymax,
               alpha = periodAlpha, fill = periodFill) +
      scale_color_manual(name = "Legend", values=c('grey', 'red')) + # this should always make comparison grey
      theme(legend.position = "bottom") +
      labs(x = "Time of day",
           y = yVarLab,
           caption = paste0("Saving session: ", pdt(startDateTime)," to ", pdt(endDateTime + 30*60),
                            "\nData: NG-ESO GB Generation Mix (y variable: ", yVar ,")\nPlot: @dataknut, points plotted at middle of half-hour for clarity\nNumber of comparison days: ", res$nCompDays)
      )
    
    return(res)
}


pdt <- function(t){ # make a pretty date
  strftime(t, "%a %d %b %Y %H:%M")
}

pd <- function(t){ # make a pretty date
  strftime(t, "%a %d %b %Y")
}
```

# Getting data

Use the half-hourly NG-ESO 'generation mix' [data](https://data.nationalgrideso.com/carbon-intensity1/historic-generation-mix) as a reasonable proxy for 'demand'.

> Should probably use the [demand data](https://data.nationalgrideso.com/demand/historic-demand-data) instead as it includes embedded wind & solar.

```{r}
#| label: getData
#| warning: false

esoF <- paste0(esoDataPath, "latest_df_fuel_ckan.csv")
# check for gzipped version (see below)
if(file.exists(paste0(esoF, ".gz"))){ 
  message("We already have a version saved to: ", paste0(esoF, ".gz"))
  message("Loading it...")
  ngeso_dt_orig <- data.table::fread(paste0(esoF, ".gz"))
} else {
  message("We don't already have a version, downloading and saving to: ", esoF)
  ngeso_dt_orig <- data.table::fread("https://data.nationalgrideso.com/backend/dataset/88313ae5-94e4-4ddc-a790-593554d8c6b9/resource/f93d1835-75bc-43e5-84ad-12472b180a98/download/df_fuel_ckan.csv")
  # nice dateTime
  ngeso_dt_orig[, dv_start := lubridate::as_datetime(DATETIME)]
  data.table::fwrite(ngeso_dt_orig, esoF) # save locally for future re-use
  dkUtils::gzipIt(esoF)
}

# if older than 1 day, reload
today <- lubridate::today()
lastNGESO <- as.Date(max(ngeso_dt_orig$dv_start))

if(today - lastNGESO >= 1) {
  # old data, reload
  message("But the version we have dates from ", lastNGESO, " (",today - lastNGESO ," days ago), downloading latest...")
  ngeso_dt_orig <- data.table::fread("https://data.nationalgrideso.com/backend/dataset/88313ae5-94e4-4ddc-a790-593554d8c6b9/resource/f93d1835-75bc-43e5-84ad-12472b180a98/download/df_fuel_ckan.csv")
  # nice dateTime
  ngeso_dt_orig[, dv_start := lubridate::as_datetime(DATETIME)]
  data.table::fwrite(ngeso_dt_orig, esoF)
  dkUtils::gzipIt(esoF)
}

# we think renewable is wind + solar, low carbon includes nuclear

ngeso_dt_orig[, dv_date := lubridate::as_date(DATETIME)] # for filtering etc
ngeso_dt_orig[, dv_hms := hms::as_hms(DATETIME)] # for filtering etc
```

Variables of interest:

-   GENERATION is in MW. It has some exclusions, its just an indicator.
-   CARBON_INTENSITY is in g CO2/kWh - we'd expect this to be high during *DFS* events (as we're trying to avoid the use of high carbon & expensive generation?)

```{r}
#|label: setSessionDates

session1Start <- lubridate::as_datetime("2022-11-15 17:00:00") # the half-hour it starts
session1End <- lubridate::as_datetime("2022-11-15 17:30:00") # the start of the half-hour it ends (makes data selection easier)

session2Start <- lubridate::as_datetime("2022-11-22 17:30:00") # the half-hour it starts
session2End <- lubridate::as_datetime("2022-11-22 18:00:00") # 

session3Start <- lubridate::as_datetime("2022-11-30 17:30:00") # the half-hour it starts
session3End <- lubridate::as_datetime("2022-11-30 18:00:00") # 

session4Start <- lubridate::as_datetime("2022-12-01 17:00:00") # the half-hour it starts
session4End <- lubridate::as_datetime("2022-12-01 17:30:00") # 

session5Start <- lubridate::as_datetime("2022-12-12 17:00:00") # the half-hour it starts
session5End <- lubridate::as_datetime("2022-12-12 17:30:00") # 

session6Start <- lubridate::as_datetime("2023-01-19 09:00:00") # the half-hour it starts
session6End <- lubridate::as_datetime("2023-01-19 09:30:00") # 

session7Start <- lubridate::as_datetime("2023-01-23 17:00:00") # the half-hour it starts
session7End <- lubridate::as_datetime("2023-01-23 17:30:00") # 

session8Start <- lubridate::as_datetime("2023-01-24 16:30:00") # the half-hour it starts
session8End <- lubridate::as_datetime("2023-01-24 17:30:00") # 
```

# Analysis

Simple comparison of the 'demand response session' day half-hourly demand with the mean half-hourly demand for the previous n days.

All sorts of caveats apply:

-   not all of these sessions were national 'live' events, some were trials by a single retailer (Octopus)
-   we may not be comparing like with like (cold vs warm, weekday vs weekend etc)
-   we can't tell from this analysis what demand would have looked like *without* the demand response intervention. That would require all the retailers to aggregate the 'savings' they estimate... or a randomised control trial

## Session 1 (Octopus: `r pdt(session1Start)`)

-   `r session1Start` to
-   `r session1End + 30*60`

(Not all retailers may have taken part in this one)

According to <https://energycentral.com/news/octopus-energy-provide-108mw-grid-flexibility-first-%E2%80%98saving-session%E2%80%99>:

> "Over 200,000 households reduced their energy demand by 108MW collectively, the same as a gas power station can generate in an hour. If replicated by all UK energy suppliers, this would be over 1GW."

But <https://www.current-news.co.uk/news/octopus-energy-customers-provide-108mw-of-flexibility-during-first-saving-session> quotes Octopus as actually saying:

> "if the program was scaled to *all electric smart meter customers* with all supplier\[s\] in Great Britain, it could create over 1GW of flexible energy load"

The following plot compares the energy use during the *DFS* event with mean energy use over the last 10 days.

```{r}
#| label: makePlotSession1
#| tbl-cap: "MW comparisons"
#| warning: false
session1_dt <- ngeso_dt_orig[dv_start >= session1Start & 
                               dv_start < session1End]

session1_mean_mw <- mean(session1_dt$GENERATION)
session1_mean_gw <- session1_mean_mw/1000

scaled_kW <- (108/200)*28000000
scaled_GW <- ((108/200)*28000000)/1000000

scaled_GW_pc <- 100*(scaled_GW/session1_mean_gw)

gb_smartMeters <- 14000000
mean_kW_per_participant <- 108/200
scaled_GB_smart_meters_GW_pc <- 100*((gb_smartMeters*mean_kW_per_participant)/1000000)/session1_mean_gw

res <- make_comparisonPlot(ngeso_dt_orig, session1Start, session1End)
#res$p # the plot
res$p

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

> Confounding factors:

-   recent temperature trends
-   recent holidays
-   etc

> Note that the comparison plot/table shows the difference between the *DFS* event day and the previous similar days. This does not show what the event day energy use would have been in the absence of the intervention - we'd need a randomised control on the day for that (or a sophisticated demand model as the counterfactual).

Octopus customers' 108 MW was `r round(100*(108/session1_mean_mw),3)` % of mean GB generation (`r session1_mean_gw` GW) over the hour of the session (see NG-ESO data above).

108 MW over 200,000 customers is `r 108/200000` MW per household or, more sensibly, `r mean_kW_per_participant` kW per household. A pretty reasonable reduction.

But if 200,000 produced a 108 MW power reduction (`r mean_kW_per_participant` kW per household ), the 1 GW estimate implies we only have `r prettyNum(1000000/mean_kW_per_participant, big.mark = ",")` GB households with a smart meter. Really? Or did they mean all suppliers taking part in the scheme?

Anyway, the latest data has 14 million domestic eletricity smart meters as of [Q1 2022](https://assets.publishing.service.gov.uk/government/uploads/system/uploads/attachment_data/file/1099629/Q2_2022_Smart_Meters_Statistics_Report.pdf) - 45% of all domestic meters.

So:

-   If all [\~28 million households](https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/families/bulletins/familiesandhouseholds/2021) in the UK did this it would be `r scaled_kW` kW. That's `r scaled_GW` GW...
-   If we reduce ambition a bit and assume that only the 14 million domestic GB customers with a smart meter as of Q2 2022 did this then that would provide `r (gb_smartMeters*mean_kW_per_participant)/1000000` GW. Which would be `r round(scaled_GB_smart_meters_GW_pc,2)` % of generation. Not bad aye?

The trouble is... these are octopus customers self-selecting into a trial. You just have to [read the tweets](https://twitter.com/SavingSessions) to see that there are households with installed batteries, pausable heat pumps in well-insulated homes and EV V2G. At what point will we all be similarly equipped?

And just to keep in mind the carbon context:

```{r}
#| label: fig-firstSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session1Start, session1End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
#res$p # the plot
res$p
```

## Session 2 (Octopus: `r pdt(session2Start)`)

-   `r session2Start` to
-   `r session2End + 30*60`

(Not all retailers may have taken part in this one)

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession2
#| tbl-cap: "MW comparisons"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session2Start, session2End)
res$p # the plot

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

And just to keep in mind the carbon context:

```{r}
#| label: fig-secondSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false
res <- make_comparisonPlot(ngeso_dt_orig, session2Start, session2End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p

```

## Session 3 (Octopus: `r pdt(session3Start)`)

-   `r session4Start` to
-   `r session4End + 30*60`

(Not all retailers may have taken part in this one)

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession3
#| tbl-cap: "MW comparisons"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session3Start, session3End)
res$p # the plot

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

And just to keep in mind the carbon context:

```{r}
#| label: fig-thirdSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false
res <- make_comparisonPlot(ngeso_dt_orig, session3Start, session3End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p
```

## Session 4 (Octopus: `r pdt(session4Start)`)

-   `r session4Start` to
-   `r session4End + 30*60`

(Not all retailers may have taken part in this one)

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession4
#| tbl-cap: "MW comparisons"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session4Start, session4End)
res$p # the plot

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

And just to keep in mind the carbon context:

```{r}
#| label: fig-fourthSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false
res <- make_comparisonPlot(ngeso_dt_orig, session4Start, session4End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p
```

## Session 5 (Octopus: `r pdt(session5Start)`)

-   `r session5Start` to
-   `r session5End + 30*60`

(Not all retailers may have taken part in this one)

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession5
#| tbl-cap: "MW comparisons"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session5Start, session5End)
res$p # the plot

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

And just to keep in mind the carbon context:

```{r}
#| label: fig-fifthSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session5Start, session5End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p

```

## Session 6 (Octopus: `r pdt(session6Start)`)

-   `r session6Start` to
-   `r session6End + 30*60`

(Not all retailers may have taken part in this one)

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession6
#| tbl-cap: "MW comparisons"
#| warning: false

res <- make_comparisonPlot(ngeso_dt_orig, session6Start, session6End)
res$p # the plot

makeFlexTable(res$wt[, hms:= as.factor(hms)], 
              cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
              digits = 1) # the table
```

And just to keep in mind the carbon context:

```{r}
#| label: fig-sixthSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false
res <- make_comparisonPlot(ngeso_dt_orig, session6Start, session6End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p

```

## Session 7 (NG-ESO 'live': `r pdt(session7Start)`)

This was a more [generalised call](https://www.bbc.co.uk/news/business-64367504) for *DFS*:

-   `r session7Start` to
-   `r session7End + 30*60`

The same caveats about the comparisons apply here...

```{r}
#| label: makePlotSession7
#| tbl-cap: "MW comparisons"
#| #| warning: false

# catch if data not yet available
if(as.Date(session7Start) < Sys.Date()){
  res <- make_comparisonPlot(ngeso_dt_orig, session7Start, session7End)
  print(res$p) # the plot
  
  makeFlexTable(res$wt[, hms:= as.factor(hms)], 
                cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
                digits = 1) # the table
} else {
  message("Data not yet available, try later :-(")
}

```

And just to keep in mind the carbon context:

```{r}
#| label: fig-seventhSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"
#| warning: false
if(as.Date(session7Start) < Sys.Date()){
res <- make_comparisonPlot(ngeso_dt_orig, session7Start, session7End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p
} else {
  message("Data not yet available, try later :-(")
}
```

## Session 8 (NG-ESO 'live': `r pdt(session8Start)`)

This was another [generalised call](https://www.bbc.co.uk/news/business-64372264) for *DFS*:

-   `r session8Start` to
-   `r session8End + 30*60`

The same caveats about the comparisons apply here...

Also this ecent followed very soon after the last one so this will affect the comparison 'baseline' (previous n days).

```{r}
#| label: makePlotSession8
#| tbl-cap: "MW comparisons"

# catch if data not yet available
if(as.Date(session8Start) < Sys.Date()){
  res <- make_comparisonPlot(ngeso_dt_orig, session8Start, session8End)
  print(res$p) # the plot
  
  makeFlexTable(res$wt[, hms:= as.factor(hms)], 
                cap = paste0("MW comparisons (hms = half hour period start, number of comparison days = ", res$nCompDays,")"),
                digits = 1) # the table
} else {
  message("Data not yet available, try later :-(")
}

```

And just to keep in mind the carbon context:

```{r}
#| label: fig-eighthSavingSessionsCI
#| fig-cap: "Comparison of carbon intensity"

if(as.Date(session8Start) < Sys.Date()){
res <- make_comparisonPlot(ngeso_dt_orig, session8Start, session8End, 
                           yVar = "CARBON_INTENSITY",
                           yVarLab = "g CO2/kWh")
res$p
} else {
  message("Data not yet available, try later :-(")
}
```

# Future work

-   more trial days
-   use 5 days before/after as comparators? Confounded by events close together...

```{r}
#| label: theEnd
```
